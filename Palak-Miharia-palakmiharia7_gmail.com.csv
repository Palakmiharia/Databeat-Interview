"Assignment"
"SQL"
"1.   -- create"
"CREATE TABLE EMPLOYEE ("
"EmpId INTEGER PRIMARY KEY,"
"First_Name TEXT NOT NULL,"
"Last_Name TEST NOT NULL,"
"Salary INTEGER NOT NULL,"
"Joining_date timestamp NOT NULL,"
"Department TEXT NOT NULL"
");"
""
"CREATE TABLE VARIABLESDETAILS ("
"EMP_REF_ID INTEGER NOT NULL,"
"VARIABLES_DATE timestamp NOT NULL,"
"VARIABLES_AMOUNT INTEGER NOT NULL,"
"PRIMARY KEY (EMP_REF_ID),"
"FOREIGN KEY (EMP_REF_ID) REFERENCES EMPLOYEE(EmpId)"
");"
""
"CREATE TABLE DESIGNATION ("
"EMP_REF_ID INTEGER NOT NULL,"
"EMP_TITLE TEXT NOT NULL,"
"AFFECTED_FROM timestamp NOT NULL,"
"PRIMARY KEY (EMP_REF_ID),"
"FOREIGN KEY (EMP_REF_ID) REFERENCES EMPLOYEE(EmpId)"
");"
""
"-- insert"
"INSERT INTO EMPLOYEE VALUES ('001', 'Manish', 'Agarwal', '700000', '2019-04-20 09:00:00', 'HR');"
"INSERT INTO EMPLOYEE VALUES ('002', 'Niranjan', 'Bose', '20000', '2019-02-11 09:00:00', 'DA');"
"INSERT INTO EMPLOYEE VALUES ('003', 'Vivek', 'Singh','100000', '2019-01-20 09:00:00', 'DA');"
"INSERT INTO EMPLOYEE VALUES ('004', 'Asutosh', 'Kapoor','700000', '2019-03-20 09:00:00', 'HR');"
"INSERT INTO EMPLOYEE VALUES ('005', 'Vihaan', 'Banerjee','300000', '2019-06-11 09:00:00', 'DA');"
"INSERT INTO EMPLOYEE VALUES ('006', 'Atul', 'Diwedi','400000', '2019-05-11 09:00:00', 'Account');"
"INSERT INTO EMPLOYEE VALUES ('007', 'Satyendra', 'Tripathi','95000', '2019-03-20 09:00:00', 'Account');"
"INSERT INTO EMPLOYEE VALUES ('008', 'Pritika', 'Bhatt','80000', '2019-02-11 09:00:00', 'DA');"
""
"INSERT INTO VARIABLESDETAILS VALUES (1, '2019-02-20 00:00:00', '15000');"
"INSERT INTO VARIABLESDETAILS VALUES (2, '2019-06-11 00:00:00', '30000');"
"INSERT INTO VARIABLESDETAILS VALUES (3, '2019-02-20 00:00:00', '42000');"
"INSERT INTO VARIABLESDETAILS VALUES (4, '2019-02-20 00:00:00', '14500');"
"INSERT INTO VARIABLESDETAILS VALUES (5, '2019-06-11 00:00:00', '23500');"
""
"INSERT INTO DESIGNATION VALUES (1, 'Asst. Manager', '2019-02-20 00:00:00');"
"INSERT INTO DESIGNATION VALUES (2, 'Senior Analyst', '2019-01-11 00:00:00');"
"INSERT INTO DESIGNATION VALUES (8, 'Senior Analyst', '2019-04 -06 00:00:00');"
"INSERT INTO DESIGNATION VALUES (5, 'Manager', '2019-10-06 00:00:00');"
"INSERT INTO DESIGNATION VALUES (4, 'Asst. Manager', '2019-12-06 00:00:00');"
"INSERT INTO DESIGNATION VALUES (7, 'Team Lead', '2019-06-06 00:00:00');"
"INSERT INTO DESIGNATION VALUES (6, 'Team Lead', '2019-09-06 00:00:00');"
"INSERT INTO DESIGNATION VALUES (3, 'Senior Analyst', '2019-08-06 00:00:00');"
""
"-- fetch"
"SELECT * FROM EMPLOYEE ;"
"SELECT * FROM VARIABLESDETAILS;"
"SELECT * FROM DESIGNATION;"
""
"2. Four different types of joins are:"
"* INNER JOIN"
"SELECT * FROM EMPLOYEE"
"INNER JOIN DESIGNATION ON EMPLOYEE.EmpId = DESIGNATION.EMP_REF_ID;"
"* LEFT JOIN"
"SELECT * FROM EMPLOYEE"
"LEFT JOIN DESIGNATION ON EMPLOYEE.EmpId = DESIGNATION.EMP_REF_ID;"
"* RIGHT JOIN"
"SELECT * FROM EMPLOYEE"
"RIGHT JOIN DESIGNATION ON EMPLOYEE.EmpId = DESIGNATION.EMP_REF_ID;"
"* OUTER JOIN OR FULL OUTER JOIN"
"SELECT * FROM EMPLOYEE"
"OUTER JOIN DESIGNATION ON EMPLOYEE.EmpId = DESIGNATION.EMP_REF_ID;"
""
"a. SELECT CONCAT(E.First_Name,'',E.Last_Name), E.Department"
"FROM EMPLOYEE E LEFT JOIN VARIABLESDETAILS V"
"ON E.EmpId = V.EMP_REF_ID"
"WHERE V.VARIABLES_AMOUNT in ("
"select min(VARIABLES_AMOUNT) from VARIABLESDETAILS"
"union"
"select max(VARIABLES_AMOUNT) from VARIABLESDETAILS)"
"ORDER BY VARIABLES_AMOUNT;"
"b. with cte as("
"select D.EMP_TITLE, (E.Salary + V.VARIABLES_AMOUNT) As SA"
"FROM ((EMPLOYEE E"
"INNER JOIN VARIABLESDETAILS V ON E.EmpId = V.EMP_REF_ID)"
"INNER JOIN DESIGNATION D ON E.EmpId = D.EMP_REF_ID)"
")"
"select * from cte"
"WHERE SA in ("
"select max(SA) from cte"
"union"
"select min(SA) from cte"
"where SA > ( SELECT MIN(SA)"
"FROM cte ))"
"ORDER BY SA;"
"c. Cross join returns columns from both the tables. The number of rows returned is the Cartesian product of the number of rows in each table."
"SELECT * FROM EMPLOYEE"
"CROSS JOIN DESIGNATION;"
""
"d. Clauses used with SELECT statement in preference order is as below:"
"FROM"
"WHERE"
"GROUP BY"
"HAVING"
"ORDER BY"
""
"3. Stored Procedures are set of SQL statements that require certain set of input values and in return it shows the result set. As this code is stored in the database they can be reused."
""
"a. SELECT E.EmpId, E.First_Name,E.Last_Name, E.Salary, E.Joining_date, E.Department"
"FROM ((EMPLOYEE E"
"INNER JOIN VARIABLESDETAILS V ON E.EmpId = V.EMP_REF_ID)"
"INNER JOIN DESIGNATION D ON E.EmpId = D.EMP_REF_ID)"
"where D.AFFECTED_FROM >= '2019-07-01 00:00:00'"
"ORDER BY V.VARIABLES_AMOUNT;"
